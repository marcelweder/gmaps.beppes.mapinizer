// Generated by CoffeeScript 1.4.0

/*

Google Maps App, aka BeppesMapinizer
Author: Marcel A. Weder
*/


(function() {
  "use strict";

  var $, $beppefrom, $beppeto, $travelmode, $viewporter, BeppesMapinizer, google, mapMe, markers, markersContainer;

  google = window.google;

  $ = window.jQuery;

  markersContainer = [];

  markers = [
    {
      'marker': null,
      'latitude': 47.411993,
      'longitude': 9.625236,
      'icon': '/location/icons/maps-marker-home.png',
      'zIndex': 100,
      'trigger': false
    }
  ];

  $beppeto = $('<input type="text" id="beppeto" value="Chur/GR, Bahnhof" placeholder="...">');

  $travelmode = $('<select id="travelmode"><option value="TRANSIT">Transit</option><option value="BICYCLING">Fahrrad</option><option value="WALKING">Zu Fuss</option></select>');

  $viewporter = $('<input type="checkbox" id="preserveViewport" title="Ganze Route anzeigen">');

  $beppefrom = $('<div><div class="infowindow-content"><form class="form" id="routeplaner" onsubmit="return window.beppe.calcRoute(); return false;"></form></div></div>');

  BeppesMapinizer = (function() {
    /*
      Constructor
    */

    function BeppesMapinizer(canvas, results, options) {
      this.canvas = canvas;
      this.results = results;
      this.options = options;
      this.defaults = {
        'panoramio': false,
        'weather': false,
        'bicycling': false,
        'cloud': false,
        'transit': false,
        'traffic': false
      };
      this.options = $.extend(this.defaults, this.options || {});
      this.map = null;
      this.mapOptions = {
        'scrollwheel': false,
        'zoom': 15,
        'mapTypeControl': true
      };
      this.mapControl = null;
      this.directions = null;
      this.directionsOptions = {};
      this.directionsService = null;
      this.directionsOptions = {
        'hideRouteList': false,
        'preserveViewport': true,
        'suppressMarkers': false,
        'draggable': true,
        'polylineOptions': {
          'strokeColor': '#00ccff',
          'strokeWeight': 5,
          'strokeOpacity': 0.8
        }
      };
      this.resultsRouter = null;
      this.resultsRouterContent = null;
      this.infoWinVisible = false;
      this.infoWin = null;
      this.panoramio = null;
      this.panoramioWidget = !!window.panoramio;
      this.panoramioCfg = {
        'tag': 'heerbrugg',
        'suppressInfoWindows': this.panoramioWidget
      };
      this.weather = null;
      this.bicycling = null;
      this.cloud = null;
      this.transit = null;
      this.traffic = null;
      this.routeLocked = false;
      this.mapCoordinates = {
        'center': {
          'latitude': 47.414455,
          'longitude': 9.617414
        },
        'moi': {
          'latitude': 47.411993,
          'longitude': 9.625236
        },
        'centerLatLan': null,
        'moiLatLan': null
      };
    }

    /*
      Setup
    */


    BeppesMapinizer.prototype.setupMap = function() {
      var $mapControl, $resultsRouter, $resultsRouterContent, that;
      that = this;
      if (this.options.mapCoordinates) {
        $.extend(this.mapCoordinates, this.options.mapCoordinates);
      }
      this.mapCoordinates.centerLatLan = new google.maps.LatLng(this.mapCoordinates.center.latitude, this.mapCoordinates.center.longitude);
      this.mapCoordinates.moiLatLan = new google.maps.LatLng(this.mapCoordinates.moi.latitude, this.mapCoordinates.moi.longitude);
      $.extend(this.mapOptions, {
        'mapTypeId': google.maps.MapTypeId.SATELLITE,
        'mapTypeControlOptions': {
          'style': google.maps.MapTypeControlStyle.DEFAULT
        },
        'center': this.mapCoordinates.centerLatLan
      }, this.options.mapCfg || {});
      if (this.options.panoramioCfg) {
        $.extend(this.panoramioCfg, this.options.panoramioCfg);
      }
      this.map = new google.maps.Map(this.canvas, this.mapOptions);
      $mapControl = $('#map-control').show();
      $resultsRouter = $('#map-directions');
      $resultsRouterContent = $("#map-directions-results");
      this.mapControl = $mapControl;
      this.resultsRouter = $resultsRouter;
      this.resultsRouterContent = $resultsRouterContent;
      $resultsRouter.find('.close').on('click', function(e) {
        e.preventDefault();
        $resultsRouter.hide();
        that.unsetDirections();
        $('#map-control').trigger('activated');
        return false;
      });
    };

    BeppesMapinizer.prototype.stateInfoWin = function(state) {
      state = state || null;
      if (state === null) {
        return this.infoWinVisible;
      }
      this.infoWinVisible = state;
    };

    BeppesMapinizer.prototype.setupInfoWin = function() {
      var that;
      that = this;
      this.infoWin = new google.maps.InfoWindow({
        'maxWidth': 500,
        'disableAutoPan': false,
        'pixelOffset': new google.maps.Size(8, -32)
      });
      google.maps.event.addListener(this.infoWin, 'closeclick', function() {
        that.infoWinVisible = false;
      });
    };

    BeppesMapinizer.prototype.setupMarker = function() {
      var mapsMarker, options, that, _i, _len;
      that = this;
      mapsMarker = function(options) {
        var icon, marker;
        icon = options.icon ? new google.maps.MarkerImage(options.icon, new google.maps.Size(52, 56, 'px', 'px')) : null;
        marker = new google.maps.Marker({
          'animation': google.maps.Animation.DROP,
          'icon': icon,
          'title': options.title,
          'zIndex': parseInt(options.zIndex, null),
          'position': new google.maps.LatLng(options.latitude, options.longitude)
        });
        marker.setMap(that.map);
        google.maps.event.addListener(marker, 'click', function() {
          var $routeplaner, request;
          if (!that.infoWinVisible) {
            that.infoWin.setPosition(this.getPosition());
            request = that.resultsRouter.data('request');
            if (request) {
              $beppeto.attr('value', request.destination);
              $travelmode.find('option').removeAttr('selected').filter(function() {
                if ($(this).val() === request.travelMode) {
                  $(this).attr('selected', 'selected');
                }
                return true;
              });
              $viewporter.removeAttr('checked');
              if (request.preserveViewport) {
                $viewporter.attr('checked', 'checked');
              }
            }
            $routeplaner = $beppefrom.find('#routeplaner').empty();
            $routeplaner.append('<label for="beppeto">Wohin geht die Reise?</label>');
            $routeplaner.append($('<div class="control-group">').append($('<div class="controls">').append($('<div class="input-append">').append($beppeto, '<button class="btn" type="submit">Go!</button>'))));
            $routeplaner.append($('<div class="control-group">').append($('<div class="controls controls-row">').append($travelmode.addClass('span6'), $('<label class="checkbox span6">').text('Zoom').prepend($viewporter))));
            that.infoWin.setContent($beppefrom.html());
            that.infoWin.open(that.map);
            that.infoWinVisible = true;
          } else {
            that.infoWin.close();
            that.infoWinVisible = false;
          }
        });
        if (options.trigger) {
          google.maps.event.trigger(marker, 'click');
        }
        markersContainer.push(marker);
      };
      for (_i = 0, _len = markers.length; _i < _len; _i++) {
        options = markers[_i];
        mapsMarker(options);
      }
    };

    BeppesMapinizer.prototype.initDirections = function() {
      this.directionsService = new google.maps.DirectionsService();
      this.directions = new google.maps.DirectionsRenderer(this.directionsOptions);
      this.results = document.getElementById(this.results || "");
      if (this.results) {
        this.directions.setPanel(this.results);
      }
    };

    BeppesMapinizer.prototype.setDirections = function(opts) {
      opts = opts || null;
      this.directions.setMap(this.map);
      if (opts) {
        this.directions.setOptions(opts);
      }
    };

    BeppesMapinizer.prototype.unsetDirections = function() {
      this.directions.setMap(null);
    };

    /*
      Init
    */


    BeppesMapinizer.prototype.mapInitialize = function() {
      this.canvas = document.getElementById(this.canvas || "");
      if (!this.canvas) {
        return false;
      }
      this.initDirections();
      this.setupMap();
      this.setupInfoWin();
      this.setupMarker();
      if (this.options.panoramio) {
        this.setPanoramino(this.panoramioCfg);
      }
      if (this.options.weather) {
        this.setWeather();
      }
      if (this.options.cloud) {
        this.setCloud();
      }
      if (this.options.bicycling) {
        this.setBicycling();
      }
      if (this.options.transit) {
        this.setTransit();
      }
      if (this.options.traffic) {
        this.setTraffic();
      }
    };

    /*
      Router
    */


    BeppesMapinizer.prototype.calcRoute = function() {
      var end, preserveViewport, request, start, that, travelmode;
      that = this;
      this.routeLocked = true;
      preserveViewport = $('#preserveViewport').is(':checked');
      this.setDirections({
        'preserveViewport': !preserveViewport
      });
      this.mapControl.trigger('deactivated');
      this.unsetPanoramino();
      this.unsetWeather();
      this.unsetCloud();
      this.unsetBicycling();
      this.unsetTraffic();
      start = this.mapCoordinates.moiLatLan;
      end = $('#beppeto').val();
      travelmode = $('#travelmode').val() || 'DRIVING';
      request = {
        'origin': start,
        'destination': end,
        'waypoints': [],
        'optimizeWaypoints': true,
        'provideRouteAlternatives': true,
        'travelMode': google.maps.TravelMode[travelmode],
        'unitSystem': google.maps.UnitSystem.METRIC
      };
      if (!request.destination.length) {
        $('#beppeto').focus();
        return false;
      }
      that.resultsRouter.data('request', {
        'travelMode': request.travelMode,
        'destination': request.destination,
        'preserveViewport': preserveViewport
      });
      that.resultsRouterContent.empty();
      if (travelmode === 'TRANSIT') {
        request.origin = new google.maps.LatLng(47.410387, 9.627245);
        request.waypoints = [];
      }
      this.directionsService.route(request, function(response, status) {
        if (status === google.maps.DirectionsStatus.OK) {
          that.directions.setDirections(response);
          if (markersContainer[0]) {
            google.maps.event.trigger(markersContainer[0], 'click');
          }
        } else {
          if (status === 'ZERO_RESULTS') {
            that.resultsRouterContent.html('No route could be found between the origin and destination.');
          } else if (status === 'UNKNOWN_ERROR') {
            that.resultsRouterContent.html('A directions request could not be processed due to a server error. The request may succeed if you try again.');
          } else if (status === 'REQUEST_DENIED') {
            that.resultsRouterContent.html('This webpage is not allowed to use the directions service.');
          } else if (status === 'OVER_QUERY_LIMIT') {
            that.resultsRouterContent.html('The webpage has gone over the requests limit in too short a period of time.');
          } else if (status === 'NOT_FOUND') {
            that.resultsRouterContent.html('At least one of the origin, destination, or waypoints could not be geocoded.');
          } else if (status === 'INVALID_REQUEST') {
            that.resultsRouterContent.html('The DirectionsRequest provided was invalid.');
          } else {
            that.resultsRouterContent.html("There was an unknown error in your request. Requeststatus: " + status);
          }
        }
        that.resultsRouter.show();
      });
    };

    /*
      Panoramino
    */


    BeppesMapinizer.prototype.getPanoramino = function() {
      return this.panoramio;
    };

    BeppesMapinizer.prototype.setPanoramino = function(opts) {
      if (!this.getPanoramino()) {
        this.panoramio = new google.maps.panoramio.PanoramioLayer(opts || this.panoramioCfg);
      }
      this.panoramio.setMap(this.map);
    };

    BeppesMapinizer.prototype.unsetPanoramino = function() {
      if (this.getPanoramino()) {
        this.panoramio.setMap(null);
      }
    };

    /*
      BicyclingLayer
    */


    BeppesMapinizer.prototype.getBicycling = function() {
      return this.bicycling;
    };

    BeppesMapinizer.prototype.setBicycling = function(opts) {
      if (!this.getBicycling()) {
        this.bicycling = new google.maps.BicyclingLayer(opts || {});
      }
      this.bicycling.setMap(this.map);
    };

    BeppesMapinizer.prototype.unsetBicycling = function() {
      if (this.getBicycling()) {
        this.bicycling.setMap(null);
      }
    };

    /*
      TransitLayer
      TODO: a bug? wrong behaviour. on set the transitlayer, it will hide the always existing(?) transitlayer. short: set is 'remove'!
    */


    BeppesMapinizer.prototype.getTransit = function() {
      return this.transit;
    };

    BeppesMapinizer.prototype.setTransit = function() {
      if (!this.getTransit()) {
        this.transit = new google.maps.TransitLayer();
      }
      this.transit.setMap(this.map);
    };

    BeppesMapinizer.prototype.unsetTransit = function() {
      if (this.getTransit()) {
        this.transit.setMap(null);
      }
    };

    /*
      TrafficLayer
    */


    BeppesMapinizer.prototype.getTraffic = function() {
      return this.traffic;
    };

    BeppesMapinizer.prototype.setTraffic = function() {
      if (!this.getTraffic()) {
        this.traffic = new google.maps.TrafficLayer();
      }
      this.traffic.setMap(this.map);
    };

    BeppesMapinizer.prototype.unsetTraffic = function() {
      if (this.getTraffic()) {
        this.traffic.setMap(null);
      }
    };

    /*
      WeatherLayer
    */


    BeppesMapinizer.prototype.getWeather = function() {
      return this.weather;
    };

    BeppesMapinizer.prototype.setWeather = function(opts) {
      if (!this.getWeather()) {
        this.weather = new google.maps.weather.WeatherLayer(opts || {});
      }
      this.weather.setMap(this.map);
    };

    BeppesMapinizer.prototype.unsetWeather = function() {
      if (this.getWeather()) {
        this.weather.setMap(null);
      }
    };

    /*
      CloudLayer
    */


    BeppesMapinizer.prototype.getCloud = function() {
      return this.cloud;
    };

    BeppesMapinizer.prototype.setCloud = function() {
      if (!this.getCloud()) {
        this.cloud = new google.maps.weather.CloudLayer();
      }
      this.cloud.setMap(this.map);
    };

    BeppesMapinizer.prototype.unsetCloud = function() {
      if (this.getCloud()) {
        this.cloud.setMap(null);
      }
    };

    BeppesMapinizer.prototype.getOptions = function() {
      return this.options;
    };

    BeppesMapinizer.prototype.getMap = function() {
      return this.map;
    };

    BeppesMapinizer.prototype.getCoordinates = function() {
      return this.mapCoordinates;
    };

    return BeppesMapinizer;

  })();

  /*
  Create Class
  */


  mapMe = new BeppesMapinizer("map-canvas", "map-directions-results", {
    'mapCfg': {
      'zoom': 13
    },
    'mapCoordinates': {
      'center': {
        'latitude': 47.421816,
        'longitude': 9.599476
      }
    },
    'panoramioCfg': {
      'tag': 'rheintal'
    }
  });

  /*
  Window Refs
  */


  window.beppe = window.beppe || {};

  $.extend(window.beppe, {
    calcRoute: function() {
      mapMe.calcRoute();
      return false;
    }
    /*
    Run, you know ...
    */

  });

  google.maps.event.addDomListener(window, 'load', function() {
    var btnCls, options, sowhat, toggleControl;
    if (window.parent) {
      try {
        window.parent.beppesFrameHelper.addClass('loaded');
      } catch (error) {
        sowhat = error;
      }
    }
    mapMe.mapInitialize();
    btnCls = 'btn-inverse';
    options = mapMe.getOptions();
    toggleControl = function(mapcontrol, activated) {
      switch (mapcontrol) {
        case "panoramio":
          if (activated) {
            mapMe.unsetPanoramino();
          } else {
            mapMe.setPanoramino();
          }
          break;
        case "bicycling":
          if (activated) {
            mapMe.unsetBicycling();
          } else {
            mapMe.setBicycling();
          }
          break;
        case "cloud":
          if (activated) {
            mapMe.unsetCloud();
          } else {
            mapMe.setCloud();
          }
          break;
        case "weather":
          if (activated) {
            mapMe.unsetWeather();
          } else {
            mapMe.setWeather();
          }
          break;
        case "traffic":
          if (activated) {
            mapMe.unsetTraffic();
          } else {
            mapMe.setTraffic();
          }
          break;
        case "transit":
          if (activated) {
            mapMe.unsetTransit();
          } else {
            mapMe.setTransit();
          }
      }
    };
    $('#map-control').on({
      'deactivated': function() {
        $(this).find('.btn').addClass('disabled').attr('disabled', 'disabled');
      },
      'activated': function() {
        $(this).find('.btn').removeClass('disabled').removeAttr('disabled');
        $(this).find('.' + btnCls).each(function() {
          toggleControl($(this).data('mapcontrol'), false);
        });
      }
    });
    $('#map-control .btn[data-mapcontrol]').each(function() {
      var $this, mapcontrol;
      $this = $(this);
      mapcontrol = $this.data('mapcontrol');
      if (options[mapcontrol]) {
        $this.addClass(btnCls).find('i').addClass('icon-white');
      }
      return $this.on('click', function(e) {
        var activated;
        e.preventDefault();
        if (mapcontrol === 'reset') {
          mapMe.getMap().panTo(mapMe.getCoordinates().centerLatLan);
          return false;
        }
        $this.toggleClass(btnCls).find('i').toggleClass('icon-white');
        activated = !$this.hasClass(btnCls);
        toggleControl(mapcontrol, activated);
        return false;
      });
    });
  });

}).call(this);
